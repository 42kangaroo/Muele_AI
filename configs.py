import numpy as np
import spektral

# SELF PLAY
MAX_MOVES = 280
ROOT_DIRICHLET_ALPHA = 0.8
ROOT_DIRICHLET_WEIGHT = 0.25
TURNS_UNTIL_TAU0 = 10
CPUCT = 4
SIMS_FAKTOR = 12
SIMS_EXPONENT = 1.05
EPISODES = 8
MIN_MEMORY = 200000
MAX_MEMORY = 600000
MEMORY_ITERS = 15

# RETRAINING

BATCH_SIZE = 128
EPOCHS = 8
FILTERS = 48
OUT_FILTERS = 24
HIDDEN_SIZE = 128
INPUT_SIZE = 24, 4
NUM_ACTIONS = 76
NETWORK_PATH = "run5/models/episode-"
BEST_PATH = "run5/models/best_net.h5"
NEW_NET_PATH = "run5/models/new_net.h5"
TENSORBOARD_PATH = "run5/Tensorboard/episode-"

# EVAL

EVAL_EPISODES = 8
SCORING_THRESHOLD = 1.17

# GENERAL
NUM_CPUS = 8
TRAINING_LOOPS = 50
LOGGER_PATH = "run5/AlphaLog.log"
INTERMEDIATE_SAVE_PATH = "run5/"
FILTERS_ARRAY = spektral.layers.GCNConv.preprocess(
    np.array([[1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
               0., 0., 0., 0., 0., 1., 0., 0.],
              [1., 1., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
               0., 0., 0., 0., 0., 0., 0., 0.],
              [1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
               0., 0., 0., 0., 0., 0., 0., 1.],
              [0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
               0., 0., 1., 0., 0., 0., 0., 0.],
              [0., 1., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
               0., 0., 0., 0., 0., 0., 0., 0.],
              [0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
               0., 0., 0., 0., 1., 0., 0., 0.],
              [0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 1.,
               0., 0., 0., 0., 0., 0., 0., 0.],
              [0., 1., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
               0., 0., 0., 0., 0., 0., 0., 0.],
              [0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
               0., 1., 0., 0., 0., 0., 0., 0.],
              [1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
               0., 0., 0., 0., 0., 1., 0., 0.],
              [0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
               0., 0., 1., 0., 0., 0., 0., 0.],
              [0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1.,
               0., 0., 0., 0., 0., 0., 0., 0.],
              [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0.,
               0., 1., 0., 0., 0., 0., 0., 0.],
              [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
               0., 0., 0., 0., 1., 0., 0., 0.],
              [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
               0., 0., 0., 0., 0., 0., 0., 1.],
              [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
               1., 1., 0., 0., 0., 0., 0., 0.],
              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
               1., 1., 0., 1., 0., 0., 1., 0.],
              [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1.,
               1., 1., 0., 0., 0., 0., 0., 0.],
              [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
               0., 0., 1., 1., 1., 0., 0., 0.],
              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
               1., 0., 1., 1., 1., 0., 1., 0.],
              [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
               0., 0., 1., 1., 1., 0., 0., 0.],
              [1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
               0., 0., 0., 0., 0., 1., 1., 1.],
              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
               1., 0., 0., 1., 0., 1., 1., 1.],
              [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
               0., 0., 0., 0., 0., 1., 1., 1.]]))
